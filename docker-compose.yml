version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mouse-tracker-frontend
    restart: always
    environment:
      - NEXT_PUBLIC_API_URL=http://backend-nginx:80/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - mouse-tracker-network
    depends_on:
      backend:
        condition: service_healthy

  frontend-nginx:
    build:
      context: ./frontend/nginx
      dockerfile: Dockerfile
    container_name: mouse-tracker-frontend-nginx
    restart: always
    ports:
      - "3000:80"
    depends_on:
      - frontend
    networks:
      - mouse-tracker-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mouse-tracker-backend
    restart: always
    environment:
      - DEBUG=1
      - SECRET_KEY=your-secret-key-here
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1] backend backend-nginx frontend frontend-nginx
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000,http://localhost,http://frontend-nginx:80
      - MONGODB_URI=mongodb://mongodb:27017/?replicaSet=rs0
      - MONGODB_DB=mouse_tracker
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    networks:
      - mouse-tracker-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/tracking/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend-nginx:
    build:
      context: ./backend/nginx
      dockerfile: Dockerfile
    container_name: mouse-tracker-backend-nginx
    restart: always
    ports:
      - "8000:80"
    volumes:
      - backend_static:/app/staticfiles:ro
      - backend_media:/app/media:ro
    depends_on:
      - backend
    networks:
      - mouse-tracker-network

  mongodb:
    image: mongo:6.0
    container_name: mouse-tracker-mongodb
    restart: always
    ports:
      - "27017:27017"
    command: [ "mongod", "--replSet", "rs0", "--bind_ip_all" ]
    volumes:
      - mongodb_data:/data/db
    networks:
      - mouse-tracker-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-init:
    image: mongo:6.0
    container_name: mongo-init
    depends_on:
      - mongodb
    restart: "no"
    entrypoint: >
      bash -c "
        for i in {1..20}; do
          echo 'Waiting for MongoDB to be ready...';
          mongosh --host mongodb --eval 'db.runCommand({ ping: 1 })' && break;
          sleep 3;
        done;
        mongosh --host mongodb --eval '
          try {
            rs.status();
          } catch (e) {
            print(\"Replica set not yet initiated, initiating...\");
            rs.initiate();
          }
        '
      "
    networks:
      - mouse-tracker-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - mouse-tracker-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mouse-tracker-network
    healthcheck:
      test: [ "CMD", "bash", "-c", "nc -z localhost 9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.5.0
    container_name: kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      hdfs-namenode:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: "connect-group"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_PLUGIN_PATH: /usr/share/java,/etc/kafka-connect/jars
      HDFS_URL: hdfs://hdfs-namenode:9000/kafka
    volumes:
      - ./kafka-connect-jars:/etc/kafka-connect/jars
    networks:
      - mouse-tracker-network

  hdfs-namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-namenode
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://hdfs-namenode:9000
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hdfs_namenode:/hadoop/dfs/name
    networks:
      - mouse-tracker-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9870" ]
      interval: 10s
      timeout: 5s
      retries: 5

  hdfs-datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-datanode
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://hdfs-namenode:9000
    ports:
      - "9864:9864"
    volumes:
      - hdfs_datanode:/hadoop/dfs/data
    networks:
      - mouse-tracker-network
    depends_on:
      - hdfs-namenode

networks:
  mouse-tracker-network:
    name: mouse-tracker-network
    driver: bridge

volumes:
  mongodb_data:
  backend_static:
  backend_media:
  hdfs_namenode:
  hdfs_datanode: